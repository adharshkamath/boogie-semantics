#!/usr/bin/env python3

# Usage: $0 [--infer-only] [--no-infer] [--full] program.bpl K_ARGS
#
# --no-infer: Do not use boogie to transform the program and infer invariants
# --full:     Do not produce a summary of the krun --search's output. Instead print the entire term

import sys
import os
import re
import subprocess
import tempfile

# High-level helpers
# ==================

infer_only = False
should_infer = True
input_path = None

def parse_args(args):
    global infer_only , should_infer , input_path 
    while not(input_path):
        arg = args.pop(0)
        if   arg == '--infer-only': infer_only = True
        elif arg == '--no-infer'  : should_infer = False
        else                      : input_path = arg

def preprocess(input_lines, filename):
    """ Annotate `assert` statements with line numbers"""

    out = ''
    assertExpr = re.compile(r'\bassert\b')
    for num, line in enumerate(input_lines):
        line = assertExpr.sub( 'assert { :source "%s", %d } { :code "BP5001" }' % (filename, num + 1)
                             , line
                             )
        out += line
    return out

def infer(input):
    inferred = subprocess.run( ['boogie', '/nologo', '/noVerify', '/printInstrumented', '/checkInfer', '/infer:j', 'stdin.bpl']
                             , input = input.encode()
                             , stdout = subprocess.PIPE
                             , check = True
                             ).stdout.decode()
    inferred = re.sub(r'Boogie program verifier finished.*', '', inferred)
    return inferred

# Main
# ====

sys.argv.pop(0)
parse_args(sys.argv)
output = open(input_path).readlines()
output = preprocess(output, os.path.basename(input_path))
print(infer(output))

