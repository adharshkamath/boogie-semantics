#!/usr/bin/env python3

import os
import subprocess
import sys

# Bootstrapping
# =============

# Make sure the KNinja repo is available.
#
subprocess.check_call(['git', 'submodule', 'update', '--init', '--recursive'])
extdir = 'ext'
sys.path.append(os.path.join(os.path.dirname(__file__), extdir))

from kninja import *

# Build
# =====

proj = KProject(extdir = extdir)
boogie = proj.definition( alias         = 'boogie'
                        , main          = 'boogie.md'
                        , other         = ['syntax.md', 'fresh-generator.md']
                        , backend       = 'haskell'
                        , flags         = '--syntax-module BOOGIE-PROGRAM-SYNTAX'
                        , runner_script = './boogie'
                        )

# Parsing tests
# =============

# parse_tests = []
# parse_tests += [proj.source(test).then(boogie.kast()) for test in glob('ext/boogie/Test/test*/*.bpl')]
# proj.alias('parse-tests', parse_tests).default()


# Our own tests to get us started, simpler than the Boogie test suite

all_tests = list(glob('./test/**/*.bpl'))
black_list = list(glob('./test/bitvectors/*.bpl')) \
    + list(glob('./test/havoc/*')) \
    + ['./test/control-flow/while-nondet.bpl', 
       './test/control-flow/implementation.bpl', 
       './test/control-flow/procedure.bpl'] \

white_list = list(set(all_tests) - set(black_list)) # Really, Python?!

def diff_boogie(boogie_output):
    return proj.rule( 'diff-boogie'
                    , description = 'boogie-diff: $in $boogie_output'
                    , command = './lib/diff-boogie $in $boogie_output'
                    , ext = 'diff') \
               .variable('boogie_output', boogie_output) \
               .implicit([boogie_output])

def c_preprocessor():
    return proj.rule( 'cpp'
                    , description = 'cpp: $in'
                    , command = 'cpp -P $in -o $out'
                    , ext = 'cpp')

def test(t):
    return proj.source(t) \
               .then(c_preprocessor()) \
               .then(boogie.krun().variable('flags', '--search-final --pattern "<k> Result </k>"')) \
               .then(diff_boogie(t + '.expect')) \
               .alias(t + '.test')


default_tests   = [test(t) for t in white_list]
remaining_tests = [test(t) for t in black_list]
proj.alias('default-tests', default_tests).default()
proj.alias('all-tests', ['default-tests'] + remaining_tests )

# Main
# ====

proj.main()
