#!/usr/bin/env python3

import os
import subprocess
import sys

# Bootstrapping
# =============

# Make sure the KNinja repo is available.
#
subprocess.check_call(['git', 'submodule', 'update', '--init', '--recursive'])
extdir = 'ext'
sys.path.append(os.path.join(os.path.dirname(__file__), extdir))

from kninja import *

# Build
# =====

proj = KProject(extdir = extdir)

def build(alias):
    selector = 'k | objectk | ' + alias
    return proj.definition( alias         = alias
                          , main          = 'boogie.md'
                          , other         = ['syntax.md', 'helpers.md', 'quantification.md']
                          , backend       = 'haskell'
                          , flags         = '--gen-bison-parser --syntax-module BOOGIE-PROGRAM-SYNTAX --main-module BOOGIE-QUANTIFIERS --md-selector "%s"' % selector
                          )

verification = build('verification')

# Tests
# =====
 
driver = proj.definition( alias         = 'driver'
                        , main          = 'driver/driver.md'
                        , other         = ['driver/k-io.md', 'driver/kore.md', 'quantification.md']
                        , backend       = 'llvm'
                        , flags         = '--md-selector "k | metak" -ccopt -g -ccopt -O0 --gen-bison-parser --syntax-module KORE-SYNTAX'
                        )

kboogie_rule      = proj.rule( 'kboogie'
                             , description = 'kboogie: $in'
                             , command = './driver/driver "$in" > "$out"'
                             , ext = verification._alias
                             )
kboogie_diff_rule = proj.rule( 'diff-kboogie'
                             , description = 'diff-kboogie: $in'
                             , command = 'bin/diff-kboogie $in $expected'
                             , ext = 'diff'
                             )

def kboogie(input):
    implicit_deps = [verification.target, driver.target , *glob('driver/*')]
    kboogie_out = proj.source(input).then(kboogie_rule.implicit(list(implicit_deps)))
    ret = kboogie_out.then(kboogie_diff_rule.variable('expected', input + '.expect'))
    proj.alias(input + '.' + verification._alias, [ret])
    return ret

all_tests       = glob('test/verification/*/*.bpl')
failing_tests   = readlines('test/failing.verification')
passing_tests   = filter_out(all_tests, failing_tests)
proj.suite('test-verification',         passing_tests, kboogie)
proj.suite('test-verification-failing', failing_tests, kboogie, default = False)

# Main
# ====

proj.main()
