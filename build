#!/usr/bin/env python3

import os
import subprocess
import sys

# Bootstrapping
# =============

# Make sure the KNinja repo is available.
#
subprocess.check_call(['git', 'submodule', 'update', '--init', '--recursive'])
extdir = 'ext'
sys.path.append(os.path.join(os.path.dirname(__file__), extdir))

from kninja import *

# Build
# =====

proj = KProject(extdir = extdir)
boogie = proj.definition( alias         = 'boogie'
                        , main          = 'boogie.md'
                        , other         = ['syntax.md', 'fresh-generator.md']
                        , backend       = 'haskell'
                        , flags         = '--syntax-module BOOGIE-PROGRAM-SYNTAX'
                        , runner_script = './boogie'
                        )

# Tests
# =====

def diff_boogie(boogie_output):
    return proj.rule( 'diff-boogie'
                    , description = 'boogie-diff: $in $boogie_output'
                    , command = './lib/diff-boogie $in $boogie_output'
                    , ext = 'diff') \
               .variable('boogie_output', boogie_output) \
               .implicit([boogie_output])

def c_preprocessor():
    return proj.rule( 'cpp'
                    , description = 'cpp: $in'
                    , command = 'cpp -P $in -o $out'
                    , ext = 'cpp')

def test(bpl, source = None):
    if source == None: source = bpl
    alias = source + '.test'
    expected = source + '.expect'
    return proj.source(bpl) \
               .then(c_preprocessor()) \
               .then(boogie.krun().variable('flags', '--search-final --pattern "<k> Result </k>"')) \
               .then(diff_boogie(expected)) \
               .alias(alias)

def case_study(t):
    bpl = proj.tangle(t, selector='.boogie')
    return test(bpl.path, source = t)

def proof(t):
    return proj.source(t) \
               .then(boogie.kprove()) \
               .alias(t + '.proof')

# Our own tests to get us started, simpler than the Boogie test suite

tests        = [test(t) for t in glob('test/**/*.bpl')]
case_studies = [case_study(t) for t in glob('test/case-studies/*.bpl.md')]
proj.alias('case-studies', case_studies)
proj.alias('test', case_studies + tests).default()

proof('./test/control-flow/while-nondet-spec.k')

# Documentation and Reports
# =========================

def pandoc(inputs, output, flags):
    main = inputs.pop(0)
    return proj.source(main) \
               .then( proj.rule( 'pandoc'
                               , description = 'pandoc: $sources'
                               , command = 'pandoc -o "$out" $flags "$in" $sources'
                               ) \
                          .implicit(inputs) \
                          .output(output)
                          .variable('sources', ' '.join(inputs))
                          .variable('flags',   flags)
                    )
pandoc([ 'README.md'
       , 'boogie.md'
       , './test/case-studies/README.md'
       , './test/case-studies/coin-flip.bpl.md'
       ]
      , output='.build/report.pdf', flags='--to latex'
      )

# Main
# ====

proj.main()
