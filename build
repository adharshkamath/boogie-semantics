#!/usr/bin/env python3

import os
import subprocess
import sys

# Bootstrapping
# =============

# Make sure the KNinja repo is available.
#
subprocess.check_call(['git', 'submodule', 'update', '--init', '--recursive'])
extdir = 'ext'
sys.path.append(os.path.join(os.path.dirname(__file__), extdir))

from kninja import *

# Build
# =====

proj = KProject(extdir = extdir)

def build(alias):
    selector = 'k | objectk | ' + alias
    return proj.definition( alias         = alias
                          , main          = 'boogie.md'
                          , other         = ['syntax.md', 'helpers.md', 'quantification.md']
                          , backend       = 'haskell'
                          , flags         = '--syntax-module BOOGIE-PROGRAM-SYNTAX --main-module BOOGIE-QUANTIFIERS --md-selector "%s"' % selector
                          )

verification = build('verification')

# Tests
# =====
 
driver = proj.definition( alias         = 'driver'
                        , main          = 'driver/driver.md'
                        , other         = ['driver/k-io.md', 'quantification.md']
                        , backend       = 'llvm'
                        , flags         = '--md-selector "k | metak" -ccopt -g -ccopt -O0 --gen-bison-parser --syntax-module KORE-SYNTAX'
                        )

infer_rule = proj.rule( 'infer'
                      , description = 'infer $in'
                      , command = 'bin/boogie-infer $flags $in > "$out"'
                      , ext = 'infered.bpl'
                      )
kboogie_rule = proj.rule( 'kboogie'
                        , description = 'kboogie $definition: $in'
                        , command = './driver/driver "$definition_dir" "$in" > "$out"'
                        , ext = verification._alias
                        )

kboogie_rule = kboogie_rule.variable('definition_dir', verification._directory)
kboogie_rule = kboogie_rule.variable('verification', verification._alias)

def kboogie(input):
    if input in test_infer:
        infered = proj.source(input).then(infer_rule)
    else:
        infered = proj.source(input).then(infer_rule.variable('flags', '--no-infer'))

    implicit_deps = [verification.target, driver.target , proj.source('bin/boogie-infer'), *glob('driver/*')]
    kboogie_out = infered.then(kboogie_rule.implicit(list(implicit_deps)))

    kboogie_diff_rule = proj.rule( 'diff-kboogie'
                                 , description = 'diff-kboogie: $in'
                                 , command = 'bin/diff-kboogie $in $expected'
                                 , ext = 'diff'
                                 )
    kboogie_diff_rule = kboogie_diff_rule.variable('expected', input + '.expect')
    ret = kboogie_out.then(kboogie_diff_rule)
    proj.alias(input + '.' + verification._alias, [ret])
    return ret

all_tests     = glob('test/verification/*/*.bpl')
test_infer = [ 'test/verification/test2/CutBackEdge.bpl',
               'test/verification/test2/InvariantVerifiedUnder0.bpl',
               'test/verification/test2/LoopInvAssume.bpl',
               'test/verification/test2/Passification.bpl',
               'test/verification/test2/Rlimitouts0.bpl',
               'test/verification/test2/Structured.bpl',
               'test/verification/test2/Timeouts0.bpl',
               'test/verification/test2/Where.bpl',
             ]
failing_tests = readlines('test/failing.verification')
passing_tests = filter_out(all_tests, failing_tests)

proj.suite('test-verification',         passing_tests, kboogie)
proj.suite('test-verification-failing', failing_tests, kboogie, default = False)

# Main
# ====

proj.main()
